// TypeDecl.h
// Type declaration
//------------------------------------------------------------------------------
#pragma once
#ifndef FOUNDATION_REFLECTION_TYPEDECL_H
#define FOUNDATION_REFLECTION_TYPEDECL_H


// Includes
//------------------------------------------------------------------------------
#include "Foundation/Reflection/MetaType/TypeDeclMacro.h"

namespace TReflection
{
#define REFLECTION_META_INIT_LIST \
	REFLECTION_DECLARE_META(bool)		\
	REFLECTION_DECLARE_META(float)		\
	REFLECTION_DECLARE_META(double)		\
	REFLECTION_DECLARE_META(uint8)		\
	REFLECTION_DECLARE_META(uint16)		\
	REFLECTION_DECLARE_META(uint32)		\
	REFLECTION_DECLARE_META(uint64)		\
	REFLECTION_DECLARE_META(int8)		\
	REFLECTION_DECLARE_META(int16)		\
	REFLECTION_DECLARE_META(int32)		\
	REFLECTION_DECLARE_META(int64)		\
	REFLECTION_DECLARE_META(AString)	\
	REFLECTION_DECLARE_META(Vector2)

#define REFLECTION_CONTAINER_INIT_LIST \
	REFLECTION_DECLARE_CONTAINER(Array,			RFL_KEY(0), RFL_VALUE(1), RFL_TEMPLATE(T, ALLOCATOR))						\
	REFLECTION_DECLARE_CONTAINER(LinkedList,	RFL_KEY(0), RFL_VALUE(1), RFL_TEMPLATE(T, ALLOCATOR))						\
	REFLECTION_DECLARE_CONTAINER(Pair,			RFL_KEY(1), RFL_VALUE(2), RFL_TEMPLATE(T1, T2))								\
	REFLECTION_DECLARE_CONTAINER(HashMap,		RFL_KEY(1), RFL_VALUE(2), RFL_TEMPLATE(T, DATA, HASHER, EQUAL, ALLOCATOR))	\
	REFLECTION_DECLARE_CONTAINER(Ref,			RFL_KEY(0), RFL_VALUE(1), RFL_TEMPLATE(T))									\
		

// Class declaration
//------------------------------------------------------------------------------
#undef REFLECTION_DECLARE_META
#define REFLECTION_DECLARE_META			REFLECTION_DECLARE_METABASE
#define REFLECTION_DECLARE_CONTAINER	REFLECTION_DECLARE_METACONTAINERTYPE

REFLECTION_DECLARE_META_BEGIN
	REFLECTION_META_INIT_LIST
	REFLECTION_CONTAINER_INIT_LIST
REFLECTION_DECLARE_META_END


// Class register
//------------------------------------------------------------------------------
#undef REFLECTION_DECLARE_META
#define REFLECTION_DECLARE_META			REFLECTION_REGISTER_METATYPE

REFLECTION_REGISTER_META_BEGIN
	REFLECTION_META_INIT_LIST
REFLECTION_REGISTER_META_END


// Serializer register
//------------------------------------------------------------------------------
#undef REFLECTION_DECLARE_META
#define REFLECTION_DECLARE_META(TYPE)	\
	REFLECTION_REGISTER_SERIALIZER(TYPE, E_SERIALIZER_TEXT)	\
	//REFLECTION_REGISTER_SERIALIZER(TYPE, E_SERIALIZER_BINARY)

REFLECTION_REGISTER_SERIALIZER_BEGIN
	REFLECTION_META_INIT_LIST
REFLECTION_REGISTER_SERIALIZER_END
}

#endif // FOUNDATION_REFLECTION_TYPEDECL_H
